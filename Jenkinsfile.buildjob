def getLowerRepoNameFromUrl(urlStr) {
    return (urlStr.tokenize('/')[3].split("\\.")[0]).toLowerCase()
}

def getLowerUserNameFromUrl(urlStr) {
    return (urlStr.tokenize('/')[2]).toLowerCase()
}

def userName = null
def repoNameLower = null
def jobName = null
pipeline {
    options {
        timeout(time: 10, unit: 'MINUTES') 
    }
    agent { node { label 'kubepod' } }
    environment {
        CMD = CMD_PLACE_HOLDER
        REPO_URL = REPO_URL_PLACE_HOLDER
        REPO_CREDENTIAL_ID = REPO_CREDENTIAL_ID_PLACE_HOLDER
    }
    stages {
        stage('params validation') {
            steps {
                script {
                    if (env.REPO_URL == '' || env.REPO_URL == 'REPO_URL_PLACE_HOLDER') { // and/or whatever condition you want
                        currentBuild.result = 'ABORTED'
                        error('repo_url not set or invalid')
                    }
                    if (env.REPO_CREDENTIAL_ID == '' || env.REPO_CREDENTIAL_ID == 'REPO_CREDENTIAL_ID_PLACE_HOLDER') { // and/or whatever condition you want
                        currentBuild.result = 'ABORTED'
                        error('repo_credential_id not set or invalid')
                    }
                    if (env.CMD == '' || env.CMD == 'CMD_PLACE_HOLDER') {
                        currentBuild.result = 'ABORTED'
                        error('cmd not set or invalid')
                    }
                }
            }
        }
        stage('clone repo') {
            steps {
                git changelog: false, credentialsId: "$env.REPO_CREDENTIAL_ID", url: "$env.REPO_URL"
            }
        }
        stage('build docker image') {
            steps {
                echo 'pwd = ' + pwd()
                echo 'current workspace = ' + env.WORKSPACE
                sh 'ls'
                script {
                    userName = getLowerUserNameFromUrl(env.REPO_URL)
                    repoNameLower = getLowerRepoNameFromUrl(env.REPO_URL)
                    dockerImage = docker.build "$userName/$repoNameLower"
                }
            }
        }
        stage('build template string') {
            steps {
                script {
                    jobName = "${userName}-${repoNameLower}-job"
                    def yamlStr = """
                    apiVersion: batch/v1
                    kind: Job
                    metadata:
                        name: ${jobName}
                        namespace: algo
                    spec:
                        backoffLimit: 5
                        activeDeadlineSeconds: 600
                        ttlSecondsAfterFinished: 0
                        template:
                            spec:
                                containers:
                                    - name: ${repoNameLower}
                                      image: ${userName}/${repoNameLower}
                                      imagePullPolicy: Never
                                      command: ${env.CMD}
                                      env:
                                        - name: PYTHONUNBUFFERED
                                          value: "0"
                                restartPolicy: Never
                    """
                    
                    writeFile file: "${jobName}.yaml", text: yamlStr
                }
            }
        }

        stage('provision pod') {
            steps {
                sh 'kubectl version'
                script {
                    try {
                        sh "kubectl delete job ${jobName} -n algo"
                    } catch (Exception e) {
                        echo 'delete job got error: ' + e
                    }
                }
                echo 'check whether we have the yaml file'
                sh "kubectl apply -f ${jobName}.yaml"
            }
        }
        stage('save artifacts') {
            steps {
                    sh 'mkdir -p output'
                    sh 'ls'
                    sh "cp ./${jobName}.yaml ./output"
                    archiveArtifacts artifacts: 'output/*.yaml'
            }
        }
    }
}